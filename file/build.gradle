apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "maven"
apply plugin: "findbugs"
apply plugin: "pmd"
apply plugin: "jacoco"

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

sourceCompatibility = 1.7
targetCompatibility = 1.7
group = 'com.mychaelstyle.commons'
archivesBaseName = 'commons-file' 
version = '0.1.0'

repositories {
  mavenCentral()
  maven {
    url "file:"+System.getenv("HOME") + "/repositories/dev"
  }
}

dependencies {
  testCompile "junit:junit:4.11"
  compile 'commons-logging:commons-logging:1.1.3'
}

uploadArchives {
  repositories {
    mavenDeployer {
      file(System.getenv('HOME') + '/repositories/dev').mkdirs()
      repository(url: 'file:' + System.getenv('HOME') + '/repositories/dev')
    }
  }
}

jar {
  manifest {
    attributes 'Implementation-Title': 'mychaelstyle-commons-file', 'Implementation-Version': 0.1
  }
}

task writePom << {
  pom {
    project {
      inceptionYear '2015'
      licenses {
        license {
          name 'The Apache Software License, Version 2.0'
          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          distribution 'repo'
        }
      }
    }
  }.writeTo("$projectDir/pom.xml")
}

findbugs {
  ignoreFailures = true
  toolVersion = "2.0.1"
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/findbugs")
  effort = "max"
//  reportLevel = "high"
//  visitors = ["FindSqlInjection", "SwitchFallthrough"]
//  omitVisitors = ["FindNonShortCircuit"]
//  includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
//  excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}

pmd {
  ignoreFailures = true
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = [
    "basic",
    "braces"
  ]
}

// jacoco code coverage
jacoco {
  applyTo(tasks.withType(JavaExec))
}
test {
  jacoco {
    enabled = true
  }
}
task jacocoReport(type: JacocoReport) {
  executionData test
  sourceSets project.sourceSets.main
}

check << {
  File outDir = new File('build/reports/pmd/')
  outDir.mkdirs()
  ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask',
    classpath: configurations.pmd.asPath)
  ant.cpd(minimumTokenCount: '100', format: 'xml', 
    outputFile: new File(outDir , 'cpd.xml')) {
    fileset(dir: "src/main/java") {
      include(name: '**/*.java')
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.9'
}
